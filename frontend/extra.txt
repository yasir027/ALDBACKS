Understood. So, you're looking to implement a search functionality based on an "act" (legislation name). Here's a breakdown of the steps involved:

User Input: Take the user input for the legislation name (act).
Search Legislation Table: Use the legislation name to search the legislation table and retrieve the corresponding legislation IDs.
Search ShortNoteLeg Table: Use the legislation IDs obtained from the legislation table to search the shortnoteleg table and retrieve the corresponding shortnoteleg IDs.
Search ShortNote Table: Use the shortnoteleg IDs obtained from the shortnoteleg table to search the shortnote table and retrieve the corresponding shortnote IDs.
Search Judgment Table: Use the shortnote IDs obtained from the shortnote table to search the judgment table and retrieve the corresponding judgment IDs.
Fetch Judgment Data: Fetch the judgment data corresponding to the retrieved judgment IDs.



//


SELECT 
    j.judgmentId,
    jt.judgementTextId,
    sn.shortNoteId,
    snl.shortNoteLegId,
    l.legislationId,
    l.legislationName
FROM 
    judgment j
left JOIN 
    judgementtext jt ON j.judgmentId = jt.judgmentId
left JOIN 
    shortnote sn ON j.judgmentId = sn.judgmentId
left JOIN 
    shortnoteleg snl ON sn.shortNoteId = snl.shortNoteId
left JOIN 
    legislation l ON snl.legislationId = l.legislationId
WHERE 
    l.legislationName LIKE "Waqf Act 1995";


    ///


    140	2423	521	255	295
140	2423	521	255	296
165	2423	521	255	342
165	2423	521	255	343
214	2423	521	255	443
275	2423	521	255	568
332	2423	521	255	677
332	2423	521	255	678
332	2423	521	255	679
345	2423	521	255	697

this is giving opp

it has multiple duplicates of judgmentids

i need something like

for all legislationsubsectionid=255 it should only send 


///


i think its because we are back tracing

instead of going from subsec to section to legis why not go forward

start from legislation . so for any input and matches in legislationnames

lets say 20 rows . these 20 primaryids will go to shortnoteleg

which can have multiple primarykeys(shortnotelegid) for 1 foreignkey(legislationid)

and this will multipply more when it moves towatrds hsortnote and then judgment

then multiple judgments will point towards same legislation id

///AP (TA) Abolition of Inams Act 1955


/// SELECT 
                j.judgmentId,
                jt.judgementTextId,
                sn.shortNoteId,
                snl.shortNoteLegId,
                l.legislationId,
                l.legislationName,
                ls.legislationSectionId,
                ls.legislationSectionName,
                ls.legislationSectionPrefix,
                ls.legislationSectionNo,
                lsu.legislationSubSectionId,
                lsu.legislationSubSectionName,
                j.judgmentCitation
            FROM 
                judgment j
            RIGHT JOIN 
                judgementtext jt ON j.judgmentId = jt.judgmentId
            RIGHT JOIN 
                shortnote sn ON j.judgmentId = sn.judgmentId
            RIGHT JOIN 
                shortnoteleg snl ON sn.shortNoteId = snl.shortNoteId
            RIGHT JOIN 
                legislation l ON snl.legislationId = l.legislationId
            RIGHT JOIN 
                legislationsection ls ON l.legislationId = ls.legislationId
            RIGHT JOIN 
                legislationsubsection lsu ON ls.legislationSectionId = lsu.legislationSectionId
            WHERE 
                l.legislationName LIKE ?
        `;

how do i get disticnt values at each higher level as i move up

step 1:Aggregate unique subsection IDs for those sections and return distinct sectionids(root)(eg root of ([1,2],[1,2],[1,3]...[sectionid,subsectionid] )is [1](sectionid) (so aggregate of subsectionid is 1,2,3 and its distinct sectionid is 1 because they are all subsections of sectionid1
step 2: Aggregate unique section IDs for those legislations and retun distinct legislationids(root)

step3Aggregate unique legislation IDs for those shortnoteleg and return distinct shortnotelegid

step3Aggregate unique shortnoteIDs for those shortnote and return distinct shortnoteid
step4 : Aggregate unique shortnote IDs for those judgments and return ditinct judgementids

SELECT 
    j.judgmentId,
    jt.judgementTextId,
    sn.shortNoteId,
    snl.shortNoteLegId,
    l.legislationId,
    l.legislationName,
    MAX(ls.legislationSectionId) AS legislationSectionId, -- Select maximum section ID (or any appropriate aggregation)
    MAX(ls.legislationSectionName) AS legislationSectionName, -- Similarly for other columns
    MAX(ls.legislationSectionPrefix) AS legislationSectionPrefix,
    MAX(ls.legislationSectionNo) AS legislationSectionNo,
    MAX(lsu.legislationSubSectionId) AS legislationSubSectionId,
    MAX(lsu.legislationSubSectionName) AS legislationSubSectionName,
    j.judgmentCitation
FROM 
    judgment j
RIGHT JOIN 
    judgementtext jt ON j.judgmentId = jt.judgmentId
RIGHT JOIN 
    shortnote sn ON j.judgmentId = sn.judgmentId
RIGHT JOIN 
    shortnoteleg snl ON sn.shortNoteId = snl.shortNoteId
RIGHT JOIN 
    legislation l ON snl.legislationId = l.legislationId
LEFT JOIN 
    legislationsection ls ON l.legislationId = ls.legislationId
LEFT JOIN 
    legislationsubsection lsu ON ls.legislationSectionId = lsu.legislationSectionId
WHERE 
    l.legislationName = "AP (TA) Abolition of Inams Act 1955"
GROUP BY 
    j.judgmentId, 
    jt.judgementTextId, 
    sn.shortNoteId, 
    snl.shortNoteLegId,
    l.legislationId,
    j.judgmentCitation;

    //// api.js
import mysql from 'mysql2/promise';
import dotenv from 'dotenv';
// api.js
import 'dotenv/config';

dotenv.config();

const pool = mysql.createPool({
  connectionLimit: 10,
  host: "localhost",
  user: "root",
  password: "affansql6",
  database: "sys",
});

export async function getSearchResults(legislationName, section, subsection) {
    let connection;
    try {
        connection = await pool.getConnection();
        let query = `
            SELECT 
                j.judgmentId,
                jt.judgementTextId,
                sn.shortNoteId,
                snl.shortNoteLegId,
                l.legislationId,
                l.legislationName,
                j.judgmentCitation
            FROM 
                judgment j
            RIGHT JOIN 
                judgementtext jt ON j.judgmentId = jt.judgmentId
            inner  JOIN 
                shortnote sn ON j.judgmentId = sn.judgmentId
            RIGHT JOIN 
                shortnoteleg snl ON sn.shortNoteId = snl.shortNoteId
            RIGHT JOIN 
                legislation l ON snl.legislationId = l.legislationId
            RIGHT JOIN 
    legislationsection ls ON l.legislationId = ls.legislationId
            WHERE 
                l.legislationName LIKE ?
                  
        `;

        const queryParams = [`%${legislationName}%`];
        const conditions = [];
        if (section) {
            conditions.push(`ls.legislationSectionName LIKE ?`);
            queryParams.push(`%${section}%`);
        }
        if (subsection) {
            conditions.push(`lsu.legislationSubSectionName LIKE ?`);
            queryParams.push(`%${subsection}%`);
        }

        if (conditions.length > 0) {
            query += ` AND (${conditions.join(' OR ')})`;
        }

        const [rows] = await connection.query(query, queryParams);
        return rows;
    } catch (error) {
        console.error('Error executing query:', error);
        throw error;
    } finally {
        if (connection) {
            connection.release();
        }
    }
}


// with duplicates search
const SearchComponent = () => {
    const [query, setQuery] = useState('');
    const [section, setSection] = useState('');
    const [subsection, setSubsection] = useState('');
    const [results, setResults] = useState([]);
    const [error, setError] = useState(null);
    const [judgmentCount, setJudgmentCount] = useState(0);

    const handleSearch = async () => {
        try {
            const response = await fetch(`http://localhost:3000/api/search?legislationName=${query}&section=${section}&subsection=${subsection}`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            setResults(data); // Set new results
            setJudgmentCount(data.length);
        } catch (err) {
            console.error('Error fetching data:', err);
            setError(err);
            setResults([]); // Clear previous results in case of error
        }
    };


//new approach
import React, { useState, useEffect } from 'react';
import SubHeader from "../components/SubHeader/SubHeader.jsx";
import FrontDashboard from "../components/FrontDashboard/FrontDashboard";
import EditBar from "../components/EditBar/EditBar.jsx";
import RearDashboard from "../components/RearDashboard/RearDashboard";
import styles from "./IndexPage.module.css";
import SidePanel from "../components/SidePanel/SidePanel";
import JudgmentsTable from "../components/JudgmentsTable/JudgmentsTable.jsx";
import ShortNote from '../components/ShortNote/ShortNote'; // Import the ShortNote component

const IndexPage = () => {
    const [judgmentData, setJudgmentData] = useState(null);
    const [results, setResults] = useState([]);
    const [error, setError] = useState(null);
    const [judgmentCount, setJudgmentCount] = useState(0);

    const formatDate = (dateString) => {
        const months = [
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];

        const day = parseInt(dateString.substring(0, 2), 10);
        const monthIndex = parseInt(dateString.substring(2, 4), 10) - 1;
        const year = parseInt(dateString.substring(4), 10);

        const formattedDate = `${toOrdinal(day)} day of ${months[monthIndex]}, ${year}`;
        return formattedDate;
    };

    const toOrdinal = (num) => {
        const suffixes = ["th", "st", "nd", "rd"];
        const v = num % 100;
        return num + (suffixes[(v - 20) % 10] || suffixes[v] || suffixes[0]);
    };

   

    const handleRowClick = (data) => {
        console.log('Row clicked with data:', data);
        handleJudgmentSearch(data.judgmentId);
    };

    useEffect(() => {
        console.log("Judgment data updated:", judgmentData);
    }, [judgmentData]);

    return (
        <div>
            <SubHeader judgmentData={judgmentData} />
            <FrontDashboard />
            
            {error && <p>Error: {error.message}</p>}
            <div className={styles.sideNscroll}>
               <SidePanel setResults={setResults} setJudgmentCount={setJudgmentCount} setError={setError} />

                <div className={styles.scrollableText}>
                    <h3 className={styles.centered}>
                        {judgmentData ? (
                            <>
                                {judgmentData.judgmentCitation}<br />
                                {judgmentData.judgmentCourtText}
                                <br /><br /><br />
                                {judgmentData.judgmentJudges}
                                <br /><br /><br />

                                {judgmentData.judgmentNo || judgmentData.judgmentDOJ ? (
                                    <>{judgmentData.judgmentNo || formatDate(judgmentData.judgmentDOJ)}</>
                                ) : (
                                    <></>
                                )}

                                <br /><br /><br />
                                {judgmentData.judgmentNoText}
                                <br /><br />
                                {judgmentData.judgmentParties}
                                <br /><br />
                            </>
                        ) : (
                            'Please select a judgment from the table'
                        )}
                    </h3>

                    {/* Short Notes */}
                    <div>
                        {judgmentData && judgmentData.shortNotes && judgmentData.shortNotes.length > 0 ? (
                            judgmentData.shortNotes.map((shortNote, index) => (
                                <div key={index}>
                                    <h3>{shortNote.shortNoteText}</h3>
                                    {/* Render longNotes if available */}
                                    {shortNote.longNotes && shortNote.longNotes.length > 0 ? (
                                        shortNote.longNotes.map((longNote, idx) => (
                                            <div key={idx}>
                                                {longNote.longNoteParas && longNote.longNoteParas.length > 0 ? (
                                                    longNote.longNoteParas.map((para, pIdx) => (
                                                        <p key={pIdx}>{para.longNoteParaText}</p>
                                                    ))
                                                ) : (
                                                    <p>No long notes available</p>
                                                )}
                                            </div>
                                        ))
                                    ) : (
                                        <p>No long notes available</p>
                                    )}
                                </div>
                            ))
                        ) : (
                            'No short notes available'
                        )}
                    </div>

                    {/* Citations */}
                    <div>
                        {judgmentData && judgmentData.judgementtext && judgmentData.judgementtext.length > 0 ? (
                            judgmentData.judgementtext.map((text) => (
                                <div key={text.judgementTextId}>
                                    {/* Display judgment text */}
                                    <p>{text.judgementTextParaText}</p>

                                    {/* Display citations */}
                                    {text.judgmentsCited && text.judgmentsCited.length > 0 && (
                                        <div style={{ textAlign: 'left' }}>
                                            <h4>Cases Cited:</h4>
                                            <ul style={{ listStyleType: 'none', paddingLeft: 0 }}>
                                                {text.judgmentsCited.map((citation, index) => (
                                                    <li key={index}>
                                                        {citation.judgmentsCitedParties}
                                                        {citation.judgmentsCitedEqualCitation}
                                                        {citation.judgmentsCitedRefferedCitation && ` = ${citation.judgmentsCitedRefferedCitation}`}
                                                        {citation.judgmentsCitedParaLink && ` (Para: ${citation.judgmentsCitedParaLink})`}
                                                    </li>
                                                ))}
                                            </ul>
                                        </div>
                                    )}
                                </div>
                            ))
                        ) : (
                            'No judgment text available'
                        )}
                    </div>

                    {/* Judgment Texts */}
                    <div>
                        {judgmentData && judgmentData.judgementtext && judgmentData.judgementtext.length > 0 ? (
                            judgmentData.judgementtext.map((text) =>
                                text.judgementtextParas.map((para) => (
                                    <p key={para.judgementTextParaId}>{para.judgementTextParaText}</p>
                                ))
                            )
                        ) : (
                            'No judgment text available'
                        )}
                    </div>
                </div>
                <EditBar />
            </div>
            <RearDashboard />
            <div>
                <div>Judgments retrieved: {judgmentCount}</div>
                {results.length > 0 ? (
                    <JudgmentsTable judgmentData={results} onRowClick={handleRowClick} />
                ) : (
                    <p>No results found</p>
                )}
            </div>
        </div>
    );
};

export default IndexPage;

modify the code so that when a search is made in the sidepanel compoent, it is shown in the table component. and when a row is clicked , it shows the whole judgment data {scrolllable text part}

this is my side panel


ChatGPT
User input (search in "Subject Index" or "Case No") → Side panel sends query parameters → Fetch data from MySQL → Retrieve filtered results → Display results in a table on the index page → User clicks a row in the table → Selected judgment details retrieved → Display details in a scrollable text div on the index page.


<div className={styles.subitem}>
            <input
              type="text"
              placeholder="WORD"
              value={wordName}
              onChange={handleWordChange}
              className={styles.searchInput}
              list="words"
            />
            <datalist id="words">
              {words.map((word, index) => (
                <option key={index} value={word.word}>
                  {word.word}
                </option>
              ))}
            </datalist>
            <button className={styles.button} onClick={handleAddWord}>+</button>
          </div>