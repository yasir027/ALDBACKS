// server
import express from 'express';
import cors from 'cors';
import { sequelize, Judgment, ShortNote, Legislation, LegislationSection, LegislationSubSection, ShortNoteLeg, ShortNoteLegSec } from './models.js';

const app = express();
const port = 3001;

app.use(cors());
app.use(express.json());

const searchJudgments = async (act, section, subSection) => {
  try {
    const judgments = await Judgment.findAll({
      include: [
        {
          model: ShortNote,
          include: [
            {
              model: Legislation,
              where: act ? { legislationName: act } : {},
              through: { attributes: [] },
              include: [
                {
                  model: LegislationSection,
                  where: section ? { legislationSectionName: section } : {},
                  include: [
                    {
                      model: LegislationSubSection,
                      where: subSection ? { legislationSubSectionName: subSection } : {}
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    });

    return judgments;
  } catch (error) {
    console.error('Error in searchJudgments:', error);
    throw error;
  }
};

app.get('/search', async (req, res) => {
  const { act, section, subSection } = req.query;

  try {
    const judgments = await searchJudgments(act, section, subSection);
    res.json(judgments);
  } catch (error) {
    console.error('Error in /search:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});


//index

// IndexPage.js
import React, { useState } from 'react';
import SubHeader from "../components/SubHeader/SubHeader.jsx";
import FrontDashboard from "../components/FrontDashboard/FrontDashboard";
import EditBar from "../components/EditBar/EditBar.jsx";
import RearDashboard from "../components/RearDashboard/RearDashboard";
import styles from "./IndexPage.module.css";
import SidePanel from "../components/SidePanel/SidePanel";

const IndexPage = () => {
  const [act, setAct] = useState('');
  const [section, setSection] = useState('');
  const [subSection, setSubSection] = useState('');
  const [judgmentData, setJudgmentData] = useState(null);
  const [judgmentCount, setJudgmentCount] = useState(0);

  const handleSearch = async () => {
    try {
      const response = await fetch(`http://localhost:3001/search?act=${act}&section=${section}&subSection=${subSection}`);
      const data = await response.json();
      console.log("Received data:", data); // Log the received data
      setJudgmentData(data);
      setJudgmentCount(data.length); // Update the judgment count
    } catch (error) {
      console.error('Error fetching judgment:', error);
    }
  };

  return (
    <div>
      <SubHeader />
      <FrontDashboard />
      <div>
        <input
          type="text"
          value={act}
          onChange={(e) => setAct(e.target.value)}
          placeholder="Enter Act"
        />
        <input
          type="text"
          value={section}
          onChange={(e) => setSection(e.target.value)}
          placeholder="Enter Section"
        />
        <input
          type="text"
          value={subSection}
          onChange={(e) => setSubSection(e.target.value)}
          placeholder="Enter Sub Section"
        />
        <button onClick={handleSearch}>Search</button>
        <div>Judgments retrieved: {judgmentCount}</div> {/* Add this line */}
      </div>
      <div className={styles.sideNscroll}>
        <SidePanel />
        <div className={styles.scrollableText}>
          <h3 className={styles.centered}>
            {judgmentData ? (
              <>
                {judgmentData.map((judgment) => (
                  <div key={judgment.judgmentId}>
                    <p>{judgment.judgmentCitation}</p>
                    <p>{judgment.judgmentCourtText}</p>
                    <p>{judgment.judgmentJudges}</p>
                    <p>{judgment.judgmentNo}</p>
                    <p>{judgment.judgmentNoText}</p>
                    <p>{judgment.judgmentParties}</p>
                    {judgment.ShortNotes && judgment.ShortNotes.map((shortNote) => (
                      <div key={shortNote.shortNoteId}>
                        <p>{shortNote.shortNoteText}</p>
                        {shortNote.LongNotes && shortNote.LongNotes.map((longNote) =>
                          longNote.LongNoteParas && longNote.LongNoteParas.map((longNotePara) => (
                            <p key={longNotePara.longNoteParaId}>{longNotePara.longNoteParaText}</p>
                          ))
                        )}
                      </div>
                    ))}
                    {judgment.JudgmentTexts && judgment.JudgmentTexts.map((text) =>
                      text.JudgmentTextParas && text.JudgmentTextParas.map((para) => (
                        <p key={para.judgementTextParaId}>{para.judgementTextParaText}</p>
                      ))
                    )}
                  </div>
                ))}
              </>
            ) : (
              'No judgment data available'
            )}
          </h3>
        </div>
        <EditBar />
      </div>
      <RearDashboard />
    </div>
  );
};

export default IndexPage;


//models
// models.jsx

import { Sequelize, DataTypes } from 'sequelize';

const sequelize = new Sequelize('sys', 'root', 'affansql6', {
  host: 'localhost',
  dialect: 'mysql',
});

// Define existing models
const Judgment = sequelize.define('Judgment', {
  judgmentId: { type: DataTypes.INTEGER, primaryKey: true },
  judgmentCitation: DataTypes.STRING,
  judgmentNo: DataTypes.STRING,
  judgmentYear: DataTypes.STRING,
  judgmentNoText: DataTypes.TEXT,
  judgmentDOJ: DataTypes.STRING,
  judgmentType: DataTypes.STRING,
  judgmentPetitioner: DataTypes.TEXT,
  judgmentRespondent: DataTypes.TEXT,
  judgmentParties: DataTypes.TEXT,
  courtId: DataTypes.INTEGER,
  judgmentCourtText: DataTypes.TEXT,
  judgmentPetitionerCouncil: DataTypes.TEXT,
  judgmentRespondentCouncil: DataTypes.TEXT,
  judgmentOtherCounsel: DataTypes.TEXT,
  operatorId: DataTypes.INTEGER,
  judgmentEntryDate: DataTypes.STRING,
  judgmentJudges: DataTypes.STRING,
  judgmentDocFile: DataTypes.STRING,
  judgmentJudicialObservation: DataTypes.TEXT,
}, {
  tableName: 'judgment',
  timestamps: false,
});

const JudgmentText = sequelize.define('JudgmentText', {
  judgementTextId: { type: DataTypes.INTEGER, primaryKey: true },
  judgmentId: { type: DataTypes.INTEGER, references: { model: Judgment, key: 'judgmentId' } },
  judgementTextHTML: DataTypes.TEXT,
  judgementTextDeliveredBy: DataTypes.TEXT,
  judgementTextResult: DataTypes.TEXT,
  judgementTextNo: DataTypes.INTEGER,
}, {
  tableName: 'judgementtext',
  timestamps: false,
});

const JudgmentTextPara = sequelize.define('JudgmentTextPara', {
  judgementTextParaId: { type: DataTypes.INTEGER, primaryKey: true },
  judgementTextId: { type: DataTypes.INTEGER, references: { model: JudgmentText, key: 'judgementTextId' } },
  judgementTextParaNo: DataTypes.STRING,
  judgementTextParaText: DataTypes.TEXT,
  judgementTextParaType: DataTypes.STRING,
}, {
  tableName: 'judgementtextpara',
  timestamps: false,
});

// Define new models with new table names and relationships
const ShortNote = sequelize.define('ShortNote', {
  shortNoteId: { type: DataTypes.INTEGER, primaryKey: true },
  judgmentId: { type: DataTypes.INTEGER, references: { model: Judgment, key: 'judgmentId' } },
  shortNoteText: DataTypes.TEXT,
}, {
  tableName: 'shortnote',
  timestamps: false,
});

const ShortNotePara = sequelize.define('ShortNotePara', {
  shortNoteParaId: { type: DataTypes.INTEGER, primaryKey: true },
  shortNoteId: { type: DataTypes.INTEGER, references: { model: ShortNote, key: 'shortNoteId' } },
  shortNoteParaText: DataTypes.TEXT, 
  shortNoteParaLink: DataTypes.TEXT, 
  shortNoteParaJudgmentNo: DataTypes.INTEGER, 
}, {
  tableName: 'shortnotepara',
  timestamps: false,
});

const LongNote = sequelize.define('LongNote', {
  longNoteId: { type: DataTypes.INTEGER, primaryKey: true },
  shortNoteId: { type: DataTypes.INTEGER, references: { model: ShortNote, key: 'shortNoteId' } },
  longNoteText: DataTypes.TEXT,
}, {
  tableName: 'longnote',
  timestamps: false,
});
  

const LongNotePara = sequelize.define('LongNotePara', {
  longNoteParaId: { type: DataTypes.INTEGER, primaryKey: true },
  longNoteId: { type: DataTypes.INTEGER, references: { model: LongNote, key: 'longNoteId' } },
  longNoteParaText: DataTypes.TEXT,
}, {
  tableName: 'longnotepara',
  timestamps: false,
});

const Legislation = sequelize.define('Legislation', {
  legislationId: { type: DataTypes.INTEGER, primaryKey: true },
  legislationTypeId: { type: DataTypes.INTEGER },
  legislationNo: { type: DataTypes.INTEGER },
  legislationName: { type: DataTypes.STRING(500) },
  legislationYear: { type: DataTypes.STRING(100) },
  legislationHtmlContents: { type: DataTypes.TEXT('long') },
  legislationEnactment: { type: DataTypes.TEXT },
  legislationDesc: { type: DataTypes.TEXT },
}, {
  tableName: 'legislation',
  timestamps: false,
});




const LegislationSection = sequelize.define('LegislationSection', {
  legislationSectionId: { type: DataTypes.INTEGER, primaryKey: true },
  legislationId: { type: DataTypes.INTEGER, references: { model: Legislation, key: 'legislationId' } },
  legislationSectionName: { type: DataTypes.STRING(200) },
  legislationSectionPrefix: { type: DataTypes.STRING(20) },
  legislationSectionNo: { type: DataTypes.STRING(20) },
  legislationSectionHtmlContents: { type: DataTypes.TEXT('long') },
  legislationSectionSubSections: { type: DataTypes.TEXT },
}, {
  tableName: 'legislationsection',
  timestamps: false,
});

const LegislationSubSection = sequelize.define('LegislationSubSection', {
  legislationSubSectionId: { type: DataTypes.INTEGER, primaryKey: true },
  legislationSectionId: { type: DataTypes.INTEGER, references: { model: LegislationSection, key: 'legislationSectionId' } },
  legislationSubSectionName: { type: DataTypes.STRING },
}, {
  tableName: 'legislationsubsection',
  timestamps: false,
});


const ShortNoteLeg = sequelize.define('ShortNoteLeg', {
  shortNoteLegId: { type: DataTypes.INTEGER, primaryKey: true },
  shortNoteId: { type: DataTypes.INTEGER, references: { model: ShortNote, key: 'shortNoteId' } },
  legislationId: { type: DataTypes.INTEGER, references: { model: Legislation, key: 'legislationId' } },
}, {
  tableName: 'shortnoteleg',
  timestamps: false,
});

const ShortNoteLegSec = sequelize.define('ShortNoteLegSec', {
  shortNoteLegSecId: { type: DataTypes.INTEGER, primaryKey: true },
  shortNoteId: { type: DataTypes.INTEGER, references: { model: ShortNote, key: 'shortNoteId' } },
  legislationSectionId: { type: DataTypes.INTEGER, references: { model: LegislationSection, key: 'legislationSectionId' } },
}, {
  tableName: 'shortnotelegsec',
  timestamps: false,
});








const judgmentsCited = sequelize.define('judgmentsCited', {
  judgmentsCitedId: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  judgementTextId: { type: DataTypes.INTEGER, references: { model: JudgmentText, key: 'judgementTextId' } },
  judgmentsCitedParties: { type: DataTypes.STRING, allowNull: true },
  judgmentsCitedReferredCitation: { type: DataTypes.TEXT, allowNull: true },
  judgmentsCitedEqualCitation: { type: DataTypes.TEXT, allowNull: true },
  judgmentsCitedParaLink: { type: DataTypes.TEXT, allowNull: true },
  judgmentsCitedText: { type: DataTypes.TEXT, allowNull: true }
}, {
  tableName: 'judgmentscited',
  timestamps: false
});

const Topic = sequelize.define('Topic', {
  topicId: { type: DataTypes.INTEGER, primaryKey: true },
  topicName: { type: DataTypes.STRING(300) },
}, {
  tableName: 'topic',
  timestamps: false,
});

const Orders = sequelize.define('Orders', {
  ordersId: { type: DataTypes.INTEGER, primaryKey: true },
  ordersName: { type: DataTypes.STRING(200) },
  ordersCitation: { type: DataTypes.STRING(20) },
  ordersDateTime: { type: DataTypes.STRING(20) },
  ordersFile: { type: DataTypes.STRING(200) },
  ordersAuthor: { type: DataTypes.STRING(100) },
}, {
  tableName: 'orders',
  timestamps: false,
});


const JudgmentTopics = sequelize.define('JudgmentTopics', {
  judgmentTopicsId: { type: DataTypes.INTEGER, primaryKey: true },
  judgmentId: { type: DataTypes.INTEGER, references: { model: Judgment, key: 'judgmentId' } },
  topicId: { type: DataTypes.INTEGER, references: { model: Topic, key: 'topicId' } },
}, {
  tableName: 'judgmenttopics',
  timestamps: false,
});


const JudgmentStatusType = sequelize.define('JudgmentStatusType', {
  judgmentStatusTypeId: { type: DataTypes.INTEGER, primaryKey: true },
  judgmentStatusTypeName: { type: DataTypes.STRING(200) },
  judgmentStatusTypeText: { type: DataTypes.TEXT },
}, {
  tableName: 'judgmentstatustype',
  timestamps: false,
});


const JudgmentStatus = sequelize.define('JudgmentStatus', {
  judgmentStatusId: { type: DataTypes.INTEGER, primaryKey: true },
  judgmentStatusTypeId: { type: DataTypes.INTEGER, references: { model: JudgmentStatusType, key: 'judgmentStatusTypeId' } },
  judgmentId: { type: DataTypes.INTEGER, references: { model: Judgment, key: 'judgmentId' } },
  judgmentStatusALDCitation: { type: DataTypes.STRING(200) },
  judgmentStatusLinkCitation: { type: DataTypes.STRING(200) },
  judgmentStatusLeftRight: { type: DataTypes.STRING }, // Assuming it's a string, you can adjust the type as needed
}, {
  tableName: 'judgmentstatus',
  timestamps: false,
});




const JudgmentCaseNos = sequelize.define('JudgmentCaseNos', {
  judgmentCaseNosId: { type: DataTypes.INTEGER, primaryKey: true },
  judgmentId: { type: DataTypes.INTEGER, references: { model: Judgment, key: 'judgmentId' } },
  judgmentCaseNo: { type: DataTypes.STRING(100) },
  judgmentCaseYear: { type: DataTypes.STRING(10) },
}, {
  tableName: 'judgmentcasenos',
  timestamps: false,
});


const Judge = sequelize.define('Judge', {
  judgeId: { type: DataTypes.INTEGER, primaryKey: true },
  judgeName: { type: DataTypes.STRING(200) },
}, {
  tableName: 'judge',
  timestamps: false,
});


const CourtType = sequelize.define('CourtType', {
  courtTypeId: { type: DataTypes.INTEGER, primaryKey: true },
  courtTypeName: { type: DataTypes.STRING(200) },
  courtTypeDesc: { type: DataTypes.TEXT },
}, {
  tableName: 'courttype',
  timestamps: false,
});


const Court = sequelize.define('Court', {
  courtId: { type: DataTypes.INTEGER, primaryKey: true },
  courtTypeId: { type: DataTypes.INTEGER, references: { model: CourtType, key: 'courtTypeId' } },
  courtName: { type: DataTypes.STRING(200) },
  courtShortName: { type: DataTypes.STRING(20) },
}, {
  tableName: 'court',
  timestamps: false,
});




const Citation = sequelize.define('Citation', {
  citationId: { type: DataTypes.INTEGER, primaryKey: true },
  judgmentId: { type: DataTypes.INTEGER, references: { model: Judgment, key: 'judgmentId' } },
  publicationYearId: { type: DataTypes.INTEGER },
  courtId: { type: DataTypes.INTEGER, references: { model: Court, key: 'courtId' } },
  citationText: { type: DataTypes.STRING(200) },
  publicationVolume: { type: DataTypes.STRING(100) },
  publicationPart: { type: DataTypes.STRING(100) },
  citationCourtName: { type: DataTypes.STRING(200) },
  citationPageNo: { type: DataTypes.INTEGER },
  citationBench: { type: DataTypes.STRING(10) },
}, {
  tableName: 'citation',
  timestamps: false,
});

// Judgment associations
Judgment.hasMany(JudgmentText, { foreignKey: 'judgmentId' });
JudgmentText.belongsTo(Judgment, { foreignKey: 'judgmentId' });

Judgment.hasMany(ShortNote, { foreignKey: 'judgmentId' });
ShortNote.belongsTo(Judgment, { foreignKey: 'judgmentId' });

// ShortNote associations
ShortNote.belongsTo(ShortNoteLeg, { foreignKey: 'shortNoteId' });
ShortNoteLeg.hasMany(ShortNote, { foreignKey: 'shortNoteId' });

ShortNote.belongsToMany(Legislation, { through: 'ShortNoteLegislation' });
Legislation.belongsToMany(ShortNote, { through: 'ShortNoteLegislation' });

// ShortNoteLeg associations
ShortNoteLeg.belongsTo(Legislation, { foreignKey: 'legislationId' });
Legislation.hasMany(ShortNoteLeg, { foreignKey: 'legislationId' });

// JudgmentText associations
JudgmentText.hasMany(JudgmentTextPara, { foreignKey: 'judgmentTextId' });
JudgmentTextPara.belongsTo(JudgmentText, { foreignKey: 'judgmentTextId' });

JudgmentText.hasMany(judgmentsCited, { foreignKey: 'judgmentTextId' });
judgmentsCited.belongsTo(JudgmentText, { foreignKey: 'judgmentTextId' });

// Legislation associations
Legislation.hasMany(ShortNoteLeg, { foreignKey: 'legislationId' });
ShortNoteLeg.belongsTo(Legislation, { foreignKey: 'legislationId' });

Legislation.hasMany(LegislationSection, { foreignKey: 'legislationId' });
LegislationSection.belongsTo(Legislation, { foreignKey: 'legislationId' });

LegislationSection.hasMany(LegislationSubSection, { foreignKey: 'legislationSectionId' });
LegislationSubSection.belongsTo(LegislationSection, { foreignKey: 'legislationSectionId' });

// Ensure you have similar associations defined in your actual models


export {
  sequelize,
  Judgment,
  JudgmentText,
  JudgmentTextPara,
  judgmentsCited,
  ShortNote,
  Legislation,
  LegislationSection,
  LegislationSubSection,
  ShortNoteLeg,
  ShortNoteLegSec
};


sequelize.sync({ force: false })
  .then(() => {
    console.log('Database & tables created!');
  })
  .catch(error => console.error('Error synchronizing database:', error));